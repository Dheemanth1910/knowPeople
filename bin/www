#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('fakesocial:server');
var http = require('http');
var userModel = require('../models/userModel');


const server = http.createServer(app);
const { Server } = require("socket.io");
const io = new Server(server);
/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create HTTP server.
 */


/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */
const userSocketMap = {}; 
const socketUserMap ={};

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
io.on('connection',(socket) => {

  socket.on('disconnect',(data)=>{
    let email = socketUserMap[socket.id];
    delete socketUserMap[socket.id] ;
    delete userSocketMap[email];
    console.log("user disconnected",socketUserMap,userSocketMap);
  })


  socket.on('clientSocketId', async (message)=>{
    userSocketMap[message.e_mail] = message.socketId; 
    socketUserMap[message.socketId] = message.e_mail;
    console.log('user sent email :',userSocketMap,socketUserMap);
    await userModel.updateOne({email:message.email},{$set:{isOnline:"1"}});
  })

  socket.on('sendNotification', (data) => {
    const {recieverEmail, senderName } = data ;
    const recipientSocket = userSocketMap[recieverEmail];
    if (recipientSocket) {
      io.to(recipientSocket).emit('notification', { message: `You received a like from ${senderName}` });
    } else {
        console.log('Recipient not connected');
    }
  })

  socket.on('join-room', (roomName)=>{
    console.log(`User joined room : ${roomName}`);
    socket.join(roomName);
    io.to(roomName).emit("room-join-message","new user joined the room");
  })

  socket.on('send-message',({message,interestName,isChannel,from,fromP,updatedAt})=>{
    if(isChannel){
      const payload = {
        message,
        from,
        fromP,
        updatedAt,
      }
      io.to(interestName).emit("room-message",payload);
    }
  })
}); 